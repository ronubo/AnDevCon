aosp_kvm - An educational device tree for AOSP. (Last updated: November 2013, verified on android-4.4_r1, a.k.a KitKat)

This device tree includes the following components:
- Android build system scripts (*.mk)
- Android Initialization scripts (init.*.rc, aosp_kvm*.sh)
- Overlay template 
- Compiled kernel (based on 3.4.5 from my 2012 session, showing that the kernel rarely has to be changed)
- QEMU execution wrapper (This one is tricky and needs to be adjusted. It is just an example to how I run it)
- Template for adding prebuilt packages (see app/)
- Out of tree executables (see external/)


The ./kvm.sh script supplies all the parameters needed to run the KVM. Networking settings and executable (kvm-* or qemu-*) may vary 
according to OS and QEMU version.
It represents the following partition and hardware structure, so when porting to other hardware or virtual machine - the init.<hw>.rc must be adjusted appropriately:

File Name	FS	qemu param	block device on target	mount point on target
============================================================================================
system.img	ext4	-hda		/dev/block/sda		/system
data.img	ext4	-hdb		/dev/block/hdb		/data
cahe.img	ext4	-hdc		/dev/block/hdc		/cache
sdcard.img	vfat	-hdd		/dev/block/hdc		/storage/sdcard


The nubo_kvm.sh is similar to the kvm.sh, representing my affection to tap devices, which are significantly better in terms of performance, and 
allow ICMP as opposed to the user kvm mode. However, using this script requires system administration on the network and tap devices, so it is not recommended 
unless you know what you are doing.



Initializing the QEMU image files
----------------------------------------
The system.img and data.img files will be generated by the Android build system.
cache.img is generated 
I deliberately left "sdcard.img" to be generated manually, so that one could just use their sdcards instead. 
It can be generated using the "mksdcard" tool from the AOSP (i.e. mksdcard [-l label] <size> <file> )





-Ron Munitz
